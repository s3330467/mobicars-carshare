<div id="navopenbtn" onclick="openNav()">
    <span class="glyphicon glyphicon-search" style="font-size:45px" onclick="openNav()"></span>
</div>

<div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <form>            
        <div class="form-group">
            <label for="filter">Filter by</label>
            <select name="type" id="type" class="form-control">
                <option value="">Select Type</option>   
            </select>
        </div>
        <div class="form-group">
            <!--<label for="contain">Select Make</label>-->
            <select name="make" id="make" class="form-control">
                <option value="">Select Make</option>
            </select>
        </div>
        <div class="form-group">
            <!--<label for="contain">Select Model</label>-->
            <select name="model" id="model" class="form-control">
                <option value="">Select Model</option>
                <!--<option value="1">Corolla</option>
                <option value="2" selected>Falcon</option>
                <option value="3">Commodore</option>
                <option value="4">Elantra</option>
                <option value="5">i30</option>--> 
                <!--<input class="form-control" type="text" />-->
            </select>
        </div>
    </form>           
</div>

<div id="map">
    <script>
        function initMap() {

            var userCoords = new google.maps.LatLng($user.getLat(), $user.getLng());
            /*creates the styles the google map display */
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 17,
                center: userCoords,
                disableDefaultUI: true,
                styles: [
                    {
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#212121"
                            }
                        ]
                    },
                    {
                        "elementType": "labels.icon",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "elementType": "labels.text.stroke",
                        "stylers": [
                            {
                                "color": "#212121"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative.country",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#9e9e9e"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative.land_parcel",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative.locality",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#bdbdbd"
                            }
                        ]
                    },
                    {
                        "featureType": "poi",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "featureType": "poi.park",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#181818"
                            }
                        ]
                    },
                    {
                        "featureType": "poi.park",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#616161"
                            }
                        ]
                    },
                    {
                        "featureType": "poi.park",
                        "elementType": "labels.text.stroke",
                        "stylers": [
                            {
                                "color": "#1b1b1b"
                            }
                        ]
                    },
                    {
                        "featureType": "road",
                        "elementType": "geometry.fill",
                        "stylers": [
                            {
                                "color": "#2c2c2c"
                            }
                        ]
                    },
                    {
                        "featureType": "road",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#8a8a8a"
                            }
                        ]
                    },
                    {
                        "featureType": "road.arterial",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#373737"
                            }
                        ]
                    },
                    {
                        "featureType": "road.highway",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#3c3c3c"
                            }
                        ]
                    },
                    {
                        "featureType": "road.highway.controlled_access",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#4e4e4e"
                            }
                        ]
                    },
                    {
                        "featureType": "road.local",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#616161"
                            }
                        ]
                    },
                    {
                        "featureType": "transit",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "featureType": "water",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#000000"
                            }
                        ]
                    },
                    {
                        "featureType": "water",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#3d3d3d"
                            }
                        ]
                    }
                ]
            });
            
            /* bookingstate is set to true if the user currently has a booking in progress
             * 
             * if the is no booking in progress the map loads all the cars from the database
             * so that the user may pick a car
             * 
             * insert functions into the "true" if statement that should only
             * run if the user DOES currently have a booking,
             * functions such as navigation and tracking*/
            var bookingState = $bookingState;
            if(bookingState == false) {
                loadNearbyCars(map);
            }
            if(bookingState == true) {
                alert("user has a booking, you shouldnt see this screen");
            }
            
            
            //functions below will execute regardless of booking state
            /* if the user has geolocation capabilites, proceed to attempt to 
             * gather their location, and constantly update it if it changes.
             */
            if ("geolocation" in navigator) {
                var locationOptions = {
                    enableHighAccuracy: true,
                    timeout: Infinity,
                    maximumAge: 0
                };
                navigator.geolocation.watchPosition(locationSuccess, locationError, locationOptions);
                map.setCenter(geopos);
                
            //if geolocation is not supported, show this error and log the user out
            } else {
                error('Geolocation is not supported by this browser');
                window.location.replace("/process_logout");
            }
            
             /*if geolocation can successfully find the users location this function is run
              * it collects the users current information and posts it to the database, 
              * for debugging purposes it also creates a marker every time for debugging, this is not final.
              * now checks to see if the user has moved at least 15 metres, if not, it does not update their position
              * this is to stop update spam/elimate inaccurate data when standing still 
              * and might need to be fine tuned.
              */
            function locationSuccess(position) {
                var geoPos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                var difference = google.maps.geometry.spherical.computeDistanceBetween(userCoords, geoPos);
                //places the marker of the current user at their location for debugging
                if(difference > 15) {
                    alert(difference);
                    var userMarker = new google.maps.Marker({
                        position: geoPos,
                        title: "$user.email",
                        label: "user",
                        map: map
                    });

                    $.post("/process_update_user_location", {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    });
                    userCoords = geoPos;
                }
            }
            
            /* if the users location cannot be found for any reason, 
             * presume location is disabled and log out the user, this app
             * cannot function without accurate location data.
             */
            function locationError(err) {
                alert("location services not enabled, please turn on to use this app");
                window.location.replace("/process_logout");
            }
        }
        
        /* load every car from the arraylist of cars stored in the car class
         * loop through the list of cars and create a marker for each car
         */
        function loadAllCars(map) {
            //create the vector art styling for a sedan
            var sedanIcon = {
                url: 'images/sedan-car-model.png'
            };
            //loop through the arrayList carList and for each car add it to var cars  
            var cars = [
                    #foreach($car in $carList)
            ['$car.plate_no', '$car.lat', '$car.lng', '$car.available'],
                    #end
            ['test', 'test', 'test', 'test']
            ];
            var infowindow = new google.maps.InfoWindow;
            var marker, i;

            for (i = 0; i < cars.length; i++) {
                if (cars[i][3] == "true") {
                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(cars[i][1], cars[i][2]),
                        title: cars[i][0],
                        icon: sedanIcon,
                        map: map
                    });
                    
                    /* during the process of creating each marker, also create
                     * the function that runs when that marker is clicked.
                     * when clicked each car marker will display an info window 
                     * which contains info about the car, as well as a button
                     * that allows the user to book that car
                     */
                    google.maps.event.addListener(marker, 'click', (function (marker, i) {
                        return function () {
                            $.post("/process_get_car_details",
                                    {
                                        plate_no: cars[i][0]
                                    },
                                    function (result)
                                    {
                                        infowindow.setContent(result);
                                        infowindow.open(map, marker);
                                    });
                        }
                    })(marker, i));
                }
            }
        }
        /* load every car from the arraylist of cars stored in the car class
         * loop through the list of cars and create a marker for each car if 
         * the car is within 100km of the user
         */
        function loadNearbyCars(map) {
            //create the vector art styling for a sedan
            var sedanIcon = {
                url: 'images/sedan-car-model.png'
            };
            //loop through the arrayList carList and for each car add it to var cars  
            var cars = [
                    #foreach($car in $carList)
            ['$car.plate_no', '$car.lat', '$car.lng', '$car.available'],
                    #end
            ['test', 'test', 'test', 'test']
            ];
            var infowindow = new google.maps.InfoWindow;
            var marker, i, distance, userPos, carPos;
            for (i = 0; i < cars.length; i++) {
                if (cars[i][3] == "true") {
                    
                    //get the distance between the userPos and the carPos in km
                    userPos = new google.maps.LatLng($user.getLat(), $user.getLng());
                    carPos = new google.maps.LatLng(cars[i][1], cars[i][2]);
                    distance =  google.maps.geometry.spherical.computeDistanceBetween(carPos, userPos)/1000;
                    
                    //if cars are further away than 100km, dont load them
                    if(distance < 100) {
                        marker = new google.maps.Marker({
                            position: new google.maps.LatLng(cars[i][1], cars[i][2]),
                            title: cars[i][0],
                            icon: sedanIcon,
                            map: map
                        });

                        /* during the process of creating each marker, also create
                         * the function that runs when that marker is clicked.
                         * when clicked each car marker will display an info window 
                         * which contains info about the car, as well as a button
                         * that allows the user to book that car
                         */
                        google.maps.event.addListener(marker, 'click', (function (marker, i) {
                            return function () {
                                $.post("/process_get_car_details",
                                        {
                                            plate_no: cars[i][0]
                                        },
                                        function (result)
                                        {
                                            infowindow.setContent(result);
                                            infowindow.open(map, marker);
                                        });
                            }
                        })(marker, i));
                    }
                }
            }
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCaOP27igpRtFBPl94Skp2Jm2R5Dvk-AlI&libraries=geometry&callback=initMap">
    </script>
</div>