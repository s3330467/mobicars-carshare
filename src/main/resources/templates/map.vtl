<!--@Author: Vishal Pradhan
Date: 23-08-2017-->

<script src="search.js"></script>
<script src="advancesearch.js"></script>

<!--On clicking the icon a sliding menu bar opens up which provides user with advance searching ability-->

<div id="navopenbtn" onclick="openNav()">
    <span class="glyphicon glyphicon-search" style="font-size:45px" onclick="openNav()"></span>
</div>

<!--On clicking the 'x' icon at the top the sliding bar retracts back providing a clear view of the default screen -->

<div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <form>            
        <div class="form-group">
            <label for="filter">Filter by</label>
            <select name="type" id="type" class="form-control">
                <option value="empty">Select Type</option>   
            </select>
        </div>
        <div class="form-group">
            <!--<label for="contain">Select Make</label>-->
            <select name="make" id="make" class="form-control">
                <option value="empty">Select Make</option>
            </select>
        </div>
        <div class="form-group">
            <!--<label for="contain">Select Model</label>-->
            <select name="model" id="model" class="form-control">
                <option value="empty">Select Model</option>
            </select>
        </div>

        <!--Edited : Vishal Pradhan     Date: 16-09-2017    Adding distance and price sliders-->
        <div>
            <label for="distance_min">Distance: </label>
            <input type="range" name="distance_min" id="distance_min" step="1" value="0" min="0" max="60">
            <p>Find car under Distance : <span id="distance_range"></span> Km</p>
        </div>
        <br />

        <div>
            <label for="price_min">Price: </label>
            <input type="range" name="price_min" id="price_min" step="10" value="0" min="0" max="100">
            <p>Find car under Price : $ <span id="price_range"> </span></p>

        </div>
        <br />

        <button id="search-btn" type="button" class="btn btn-primary"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
        <button id="find-nearest-btn" type="button" class="btn btn-primary">find nearest car</button>
        <button id="reset-map-btn" type="button" class="btn btn-primary">reset</button>
    </form>           
</div>


<!--@Author: Alexander Young-->

<div id="map">
    <script>
        //this global variable keeps track of all the map markers so they can be deleted at will
        var global_markers = [];
        var loaded_cars = [];
        var loaded_search_results = [];
        //this global variable is a reference to the main map
        var map;
        //this global variable is the current users most up to date coordinates
        var userCoords;

        //create the vector art styling for a sedan
        var sedanAvailableIcon = {
            url: 'images/sedanAvailable.png'
        };
        var sedanBookedIcon = {
            url: 'images/sedanBooked.png'
        };
        function initMap() {

            userCoords = new google.maps.LatLng($user.getLat(), $user.getLng());
            /*creates the styles the google map display */
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 17,
                center: userCoords,
                disableDefaultUI: true,
                styles: [
                    {
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#212121"
                            }
                        ]
                    },
                    {
                        "elementType": "labels.icon",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "elementType": "labels.text.stroke",
                        "stylers": [
                            {
                                "color": "#212121"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative.country",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#9e9e9e"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative.land_parcel",
                        "stylers": [
                            {
                                "visibility": "off"
                            }
                        ]
                    },
                    {
                        "featureType": "administrative.locality",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#bdbdbd"
                            }
                        ]
                    },
                    {
                        "featureType": "poi",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "featureType": "poi.park",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#181818"
                            }
                        ]
                    },
                    {
                        "featureType": "poi.park",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#616161"
                            }
                        ]
                    },
                    {
                        "featureType": "poi.park",
                        "elementType": "labels.text.stroke",
                        "stylers": [
                            {
                                "color": "#1b1b1b"
                            }
                        ]
                    },
                    {
                        "featureType": "road",
                        "elementType": "geometry.fill",
                        "stylers": [
                            {
                                "color": "#2c2c2c"
                            }
                        ]
                    },
                    {
                        "featureType": "road",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#8a8a8a"
                            }
                        ]
                    },
                    {
                        "featureType": "road.arterial",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#373737"
                            }
                        ]
                    },
                    {
                        "featureType": "road.highway",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#3c3c3c"
                            }
                        ]
                    },
                    {
                        "featureType": "road.highway.controlled_access",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#4e4e4e"
                            }
                        ]
                    },
                    {
                        "featureType": "road.local",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#616161"
                            }
                        ]
                    },
                    {
                        "featureType": "transit",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#757575"
                            }
                        ]
                    },
                    {
                        "featureType": "water",
                        "elementType": "geometry",
                        "stylers": [
                            {
                                "color": "#000000"
                            }
                        ]
                    },
                    {
                        "featureType": "water",
                        "elementType": "labels.text.fill",
                        "stylers": [
                            {
                                "color": "#3d3d3d"
                            }
                        ]
                    }
                ]
            });

            map.addListener('dragend', function () {
                displayCarsAtNewLocation();
                //alert("center changed");
            });

            var bookingState = $bookingState;
            if (bookingState === false) {
                loadAllCars();
            }
            if (bookingState === true) {
                alert("user has a booking, you shouldnt see this screen");
            }

            /**
             * Author: <b>Alexander Young</b><p>
             * Date: 23.9.17
             * <p>
             * every second the map is updated to keep it in sync with the database<p>
             */
            setInterval(function () {
                if (loaded_search_results.length === 0) {
                    loadModifiedCars();
                } else {
                    displaySearchResults();
                }
            }, 1000);


            //functions below will execute regardless of booking state
            /* if the user has geolocation capabilites, proceed to attempt to 
             * gather their location, and constantly update it if it changes.
             */
            if ("geolocation" in navigator) {
                var locationOptions = {
                    enableHighAccuracy: true,
                    timeout: Infinity,
                    maximumAge: 0
                };
                navigator.geolocation.watchPosition(locationSuccess, locationError, locationOptions);
                map.setCenter(geopos);

                //if geolocation is not supported, show this error and log the user out
            } else {
                error('Geolocation is not supported by this browser');
                window.location.replace("/process_logout");
            }

            /*if geolocation can successfully find the users location this function is run
             * it collects the users current information and posts it to the database, 
             * for debugging purposes it also creates a marker every time for debugging, this is not final.
             * now checks to see if the user has moved at least 15 metres, if not, it does not update their position
             * this is to stop update spam/elimate inaccurate data when standing still 
             * and might need to be fine tuned.
             */
            function locationSuccess(position) {
                var geoPos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                var difference = google.maps.geometry.spherical.computeDistanceBetween(userCoords, geoPos);
                //places the marker of the current user at their location for debugging
                if (difference > 15) {
                    //alert(difference);
                    var userMarker = new google.maps.Marker({
                        position: geoPos,
                        title: "$user.email",
                        label: "user",
                        map: map
                    });

                    $.post("/process_update_user_location", {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    });
                    userCoords = geoPos;
                }
            }

            /* if the users location cannot be found for any reason, 
             * presume location is disabled and log out the user, this app
             * cannot function without accurate location data.
             */
            function locationError(err) {
                alert("location services not enabled, please turn on to use this app");
                window.location.replace("/process_logout");
            }
        }
        /**
         * Author: <b>Alexander Young</b><p>
         * Date: 23.9.17
         * <p>
         * displays map markers for cars that are within 30km of the map center point<p>
         */
        function displayNearbyCars() {
            var car;
            //create the empty infowindow that will be filled with car specific info
            var infowindow = new google.maps.InfoWindow;
            for (var i = 0; i < loaded_cars.length; i++) {
                car = loaded_cars[i];
                //get the distance between the userPos and the carPos in km
                carPos = new google.maps.LatLng(car.lat, car.lng);
                distance = google.maps.geometry.spherical.computeDistanceBetween(carPos, map.getCenter()) / 1000;
                //if cars are further away than 30km from the center point of the map, dont load them
                if (distance < 30) {
                    //alert("creating a marker");
                    marker = new google.maps.Marker({
                        position: carPos,
                        title: car.plate_no,
                        icon: sedanAvailableIcon
                    });

                    /* during the process of creating each marker, also create
                     * the function that runs when that marker is clicked.
                     * when clicked each car marker will display an info window 
                     * which contains info about the car, as well as a button
                     * that allows the user to book that car
                     */
                    if (car.available === true) {
                        google.maps.event.addListener(marker, 'click', (function (marker) {
                            return function () {
                                $.post("/process_get_car_details",
                                        {
                                            plate_no: marker.title
                                        },
                                        function (result)
                                        {
                                            infowindow.setContent(result);
                                            infowindow.open(map, marker);
                                        });
                            };
                        })(marker));
                    }
                    if (car.available === false) {
                        marker.setIcon(sedanBookedIcon);
                    }

                    //add marker to the global marker array, replace its old marker if it exists, check if the array is empty and add this car to the start if it is
                    if (global_markers.length === 0) {
                        //alert("first marker, adding");
                        global_markers.push(marker);
                        marker.setMap(map);
                    }
                    for (var j = 0; j < global_markers.length; j++) {
                        //alert(global_markers[j].title + "   " + marker.title);
                        if (global_markers[j].title === marker.title) {
                            //alert("marker already exists, replacing");
                            //alert("new place:" + carPos);
                            //global_markers[j].setPlace(carPos);
                            global_markers[j].setMap(null);
                            global_markers.splice(j, 1, marker);
                            global_markers[j].setMap(map);
                            break;
                        } else if (j === (global_markers.length - 1)) {
                            // alert("marker doesnt exist, adding");
                            global_markers.push(marker);
                            marker.setMap(map);
                            break;
                        }
                    }
                }
            }

        }

        /**
         * Author: <b>Alexander Young</b><p>
         * Date: 23.9.17
         * <p>
         * updates map markers at a new location after moving the map screen<p>
         */
        function displayCarsAtNewLocation() {
            var car;
            //create the empty infowindow that will be filled with car specific info
            var infowindow = new google.maps.InfoWindow;
            for (var i = 0; i < loaded_cars.length; i++) {
                car = loaded_cars[i];
                //get the distance between the userPos and the carPos in km
                carPos = new google.maps.LatLng(car.lat, car.lng);
                distance = google.maps.geometry.spherical.computeDistanceBetween(carPos, map.getCenter()) / 1000;
                //if cars are further away than 30km from the center point of the map, dont load them
                if (distance < 30) {
                    //alert("creating a marker");
                    marker = new google.maps.Marker({
                        position: carPos,
                        title: car.plate_no,
                        icon: sedanAvailableIcon
                    });


                    /* during the process of creating each marker, also create
                     * the function that runs when that marker is clicked.
                     * when clicked each car marker will display an info window 
                     * which contains info about the car, as well as a button
                     * that allows the user to book that car
                     */
                    if (car.available === true) {
                        google.maps.event.addListener(marker, 'click', (function (marker) {
                            return function () {
                                $.post("/process_get_car_details",
                                        {
                                            plate_no: marker.title
                                        },
                                        function (result)
                                        {
                                            infowindow.setContent(result);
                                            infowindow.open(map, marker);
                                        });
                            };
                        })(marker));
                    }
                    if (car.available === false) {
                        marker.setIcon(sedanBookedIcon);
                    }

                    //add marker to the global marker array, replace its old marker if it exists, check if the array is empty and add this car to the start if it is
                    if (global_markers.length === 0) {
                        //alert("first marker, adding");
                        global_markers.push(marker);
                        marker.setMap(map);
                    }
                    for (var j = 0; j < global_markers.length; j++) {
                        //alert(global_markers[j].title + "   " + marker.title);
                        if (global_markers[j].title === marker.title) {
                            break;
                        } else if (j === (global_markers.length - 1)) {
                            // alert("marker doesnt exist, adding");
                            global_markers.push(marker);
                            marker.setMap(map);
                            break;
                        }
                    }
                }
            }

        }

        /**
         * Author: <b>Alexander Young</b><p>
         * Date: 23.9.17
         * <p>
         * updates the map markers only for cars that have changed lat, lng or availabilty<p>
         */
        function displayModifiedCars(modifiedCars) {
            var car;
            //create the empty infowindow that will be filled with car specific info
            var infowindow = new google.maps.InfoWindow;
            for (var i = 0; i < modifiedCars.length; i++) {
                car = modifiedCars[i];
                //get the distance between the userPos and the carPos in km
                carPos = new google.maps.LatLng(car.lat, car.lng);
                distance = google.maps.geometry.spherical.computeDistanceBetween(carPos, map.getCenter()) / 1000;
                //if cars are further away than 30km from the center point of the map, dont load them
                if (distance < 30) {
                    //alert("creating a marker");
                    marker = new google.maps.Marker({
                        position: carPos,
                        title: car.plate_no,
                        icon: sedanAvailableIcon
                    });



                    /* during the process of creating each marker, also create
                     * the function that runs when that marker is clicked.
                     * when clicked each car marker will display an info window 
                     * which contains info about the car, as well as a button
                     * that allows the user to book that car
                     */
                    if (car.available === true) {
                        google.maps.event.addListener(marker, 'click', (function (marker) {
                            return function () {
                                $.post("/process_get_car_details",
                                        {
                                            plate_no: marker.title
                                        },
                                        function (result)
                                        {
                                            infowindow.setContent(result);
                                            infowindow.open(map, marker);
                                        });
                            };
                        })(marker));
                    }

                    if (car.available === false) {
                        marker.setIcon(sedanBookedIcon);
                    }

                    //add marker to the global marker array, replace its old marker if it exists, check if the array is empty and add this car to the start if it is
                    if (global_markers.length === 0) {
                        //alert("first marker, adding");
                        global_markers.push(marker);
                        marker.setMap(map);
                    }
                    for (var j = 0; j < global_markers.length; j++) {
                        //alert(global_markers[j].title + "   " + marker.title);
                        if (global_markers[j].title === marker.title) {
                            //alert("marker already exists, replacing");
                            //alert("new place:" + carPos);
                            //global_markers[j].setPlace(carPos);
                            global_markers[j].setMap(null);
                            global_markers.splice(j, 1, marker);
                            global_markers[j].setMap(map);
                            break;
                        } else if (j === (global_markers.length - 1)) {
                            // alert("marker doesnt exist, adding");
                            global_markers.push(marker);
                            marker.setMap(map);
                            break;
                        }
                    }
                }
            }

        }
        function loadAllCars() {
            //loop through the json object carList and operate on each car
            $.getJSON("/cars", function (cars) {
                //for each data object(car) in the Json retrieved, add it to the array of cars to load
                //the variable i is the incrementing count, it must be present but is not ever used
                $.each(cars, function (i, car) {
                    //add car to the global car array
                    loaded_cars.push(car);
                });
                displayNearbyCars();
            });
        }

        /**
         * Author: <b>Alexander Young</b><p>
         * Date: 23.9.17
         * <p>
         * load the new data for any car that has changed lat, lng or availabilty<p>
         */
        function loadModifiedCars() {
            //loop through the json object carList and operate on each car
            var modifiedCars = [];
            $.get("/cars", function (cars) {
                //for each data object(car) in the Json retrieved, add it to the array of cars to load
                //the variable i is the incrementing count, it must be present but is not ever used
                $.each(cars, function (i, car) {
                    //add car to the global car array
                    for (var i = 0; i < loaded_cars.length; i++) {
                        if (car.plate_no === loaded_cars[i].plate_no) {
                            //alert("modifed car plate_no match");
                            if (car.lat !== loaded_cars[i].lat || car.lng !== loaded_cars[i].lng || car.available !== loaded_cars[i].available) {
                                //alert("car1: "+car.plate_no+car.lat + car.lng + car.available + "\ncar2: "+loaded_cars[i].plate_no+loaded_cars[i].lat + loaded_cars[i].lng + loaded_cars[i].available );
                                loaded_cars.splice(i, 1, car);
                                modifiedCars.push(car);
                            }
                        }
                    }
                });
                displayModifiedCars(modifiedCars);
            });
        }

        /* @author Alexander Young
         * 07-09-17
         * this function removes all map markers from the map
         */
        function unloadAllCars() {
            for (i = 0; i < global_markers.length; i++) {
                global_markers[i].setMap(null);
            }
            loaded_cars.length = 0;
            global_markers.length = 0;
        }

        /* Load a specific subset of cars that are a JSON result from the search function
         */

        /*
         Edited: 19-09-2017  by Vishal Pradhan
         added inputDistance and inputCost pararmeter to the function which now fetches the price range and 
         distance range and shows the outcome of the search based on the users selection
         */
        function loadSearchResults(searchResults, inputDistance, inputCost) {

            var loadDistance = 0;
            var maxCost = 0;
            loaded_cars.length = 0;

            if (inputDistance !== undefined) {
                loadDistance = inputDistance;

            }
            if (inputCost !== undefined) {
                maxCost = inputCost;
            }
            //create the vector art styling for a sedan
            var sedanIcon = {
                url: 'images/carmarker - Copy.png'
            };
            //create the empty infowindow that will be filled with car specific info
            var infowindow = new google.maps.InfoWindow;
            //loop through the json object carList and operate on each car
            //for each data object(car) in the Json retrieved, create a map marker, 
            //the variable i is the incrementing count, it must be present but is not ever used
            $.each(searchResults, function (i, car) {
                if (car.available == true) {
                    //get the distance between the userPos and the carPos in km
                    userPos = new google.maps.LatLng($user.getLat(), $user.getLng());
                    carPos = new google.maps.LatLng(car.lat, car.lng);
                    distance = google.maps.geometry.spherical.computeDistanceBetween(carPos, userPos) / 1000;

                    //if cars are further away than 100km, dont load them

                    if (distance < loadDistance && car.hourly_price < maxCost) {
                        marker = new google.maps.Marker({
                            position: carPos,
                            title: car.plate_no,
                            icon: sedanIcon,
                            map: map
                        });

                        //add marker to the global marker array
                        global_markers.push(marker);

                        /* during the process of creating each marker, also create
                         * the function that runs when that marker is clicked.
                         * when clicked each car marker will display an info window 
                         * which contains info about the car, as well as a button
                         * that allows the user to book that car
                         */
                        google.maps.event.addListener(marker, 'click', (function (marker) {
                            return function () {
                                $.post("/process_get_car_details",
                                        {
                                            plate_no: marker.title
                                        },
                                        function (result)
                                        {
                                            infowindow.setContent(result);
                                            infowindow.open(map, marker);
                                        });
                            }
                        })(marker));
                    }
                }
            });
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCaOP27igpRtFBPl94Skp2Jm2R5Dvk-AlI&libraries=geometry&callback=initMap">
    </script>
</div>